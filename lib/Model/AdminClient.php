<?php
/**
 * AdminClient
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.3
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\nucleus\Model;

use \ArrayAccess;
use \com\hydrogen\nucleus\ObjectSerializer;

/**
 * AdminClient Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdminClient implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AdminClient';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'authorities' => 'string',
        'create_date' => '\DateTime',
        'id' => 'int',
        'is_2fa' => 'bool',
        'is_2fa_verified' => 'bool',
        'is_account_non_expired' => 'bool',
        'is_account_non_locked' => 'bool',
        'is_credentials_non_expired' => 'bool',
        'is_enabled' => 'bool',
        'password' => 'string',
        'tenant' => 'string',
        'update_date' => '\DateTime',
        'username' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'authorities' => null,
        'create_date' => 'date-time',
        'id' => 'int64',
        'is_2fa' => null,
        'is_2fa_verified' => null,
        'is_account_non_expired' => null,
        'is_account_non_locked' => null,
        'is_credentials_non_expired' => null,
        'is_enabled' => null,
        'password' => null,
        'tenant' => null,
        'update_date' => 'date-time',
        'username' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authorities' => 'authorities',
        'create_date' => 'create_date',
        'id' => 'id',
        'is_2fa' => 'is_2fa',
        'is_2fa_verified' => 'is_2fa_verified',
        'is_account_non_expired' => 'is_account_non_expired',
        'is_account_non_locked' => 'is_account_non_locked',
        'is_credentials_non_expired' => 'is_credentials_non_expired',
        'is_enabled' => 'is_enabled',
        'password' => 'password',
        'tenant' => 'tenant',
        'update_date' => 'update_date',
        'username' => 'username'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authorities' => 'setAuthorities',
        'create_date' => 'setCreateDate',
        'id' => 'setId',
        'is_2fa' => 'setIs2fa',
        'is_2fa_verified' => 'setIs2faVerified',
        'is_account_non_expired' => 'setIsAccountNonExpired',
        'is_account_non_locked' => 'setIsAccountNonLocked',
        'is_credentials_non_expired' => 'setIsCredentialsNonExpired',
        'is_enabled' => 'setIsEnabled',
        'password' => 'setPassword',
        'tenant' => 'setTenant',
        'update_date' => 'setUpdateDate',
        'username' => 'setUsername'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authorities' => 'getAuthorities',
        'create_date' => 'getCreateDate',
        'id' => 'getId',
        'is_2fa' => 'getIs2fa',
        'is_2fa_verified' => 'getIs2faVerified',
        'is_account_non_expired' => 'getIsAccountNonExpired',
        'is_account_non_locked' => 'getIsAccountNonLocked',
        'is_credentials_non_expired' => 'getIsCredentialsNonExpired',
        'is_enabled' => 'getIsEnabled',
        'password' => 'getPassword',
        'tenant' => 'getTenant',
        'update_date' => 'getUpdateDate',
        'username' => 'getUsername'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['authorities'] = isset($data['authorities']) ? $data['authorities'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_2fa'] = isset($data['is_2fa']) ? $data['is_2fa'] : null;
        $this->container['is_2fa_verified'] = isset($data['is_2fa_verified']) ? $data['is_2fa_verified'] : null;
        $this->container['is_account_non_expired'] = isset($data['is_account_non_expired']) ? $data['is_account_non_expired'] : null;
        $this->container['is_account_non_locked'] = isset($data['is_account_non_locked']) ? $data['is_account_non_locked'] : null;
        $this->container['is_credentials_non_expired'] = isset($data['is_credentials_non_expired']) ? $data['is_credentials_non_expired'] : null;
        $this->container['is_enabled'] = isset($data['is_enabled']) ? $data['is_enabled'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['tenant'] = isset($data['tenant']) ? $data['tenant'] : null;
        $this->container['update_date'] = isset($data['update_date']) ? $data['update_date'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authorities
     *
     * @return string
     */
    public function getAuthorities()
    {
        return $this->container['authorities'];
    }

    /**
     * Sets authorities
     *
     * @param string $authorities authorities
     *
     * @return $this
     */
    public function setAuthorities($authorities)
    {
        $this->container['authorities'] = $authorities;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_2fa
     *
     * @return bool
     */
    public function getIs2fa()
    {
        return $this->container['is_2fa'];
    }

    /**
     * Sets is_2fa
     *
     * @param bool $is_2fa is_2fa
     *
     * @return $this
     */
    public function setIs2fa($is_2fa)
    {
        $this->container['is_2fa'] = $is_2fa;

        return $this;
    }

    /**
     * Gets is_2fa_verified
     *
     * @return bool
     */
    public function getIs2faVerified()
    {
        return $this->container['is_2fa_verified'];
    }

    /**
     * Sets is_2fa_verified
     *
     * @param bool $is_2fa_verified is_2fa_verified
     *
     * @return $this
     */
    public function setIs2faVerified($is_2fa_verified)
    {
        $this->container['is_2fa_verified'] = $is_2fa_verified;

        return $this;
    }

    /**
     * Gets is_account_non_expired
     *
     * @return bool
     */
    public function getIsAccountNonExpired()
    {
        return $this->container['is_account_non_expired'];
    }

    /**
     * Sets is_account_non_expired
     *
     * @param bool $is_account_non_expired is_account_non_expired
     *
     * @return $this
     */
    public function setIsAccountNonExpired($is_account_non_expired)
    {
        $this->container['is_account_non_expired'] = $is_account_non_expired;

        return $this;
    }

    /**
     * Gets is_account_non_locked
     *
     * @return bool
     */
    public function getIsAccountNonLocked()
    {
        return $this->container['is_account_non_locked'];
    }

    /**
     * Sets is_account_non_locked
     *
     * @param bool $is_account_non_locked is_account_non_locked
     *
     * @return $this
     */
    public function setIsAccountNonLocked($is_account_non_locked)
    {
        $this->container['is_account_non_locked'] = $is_account_non_locked;

        return $this;
    }

    /**
     * Gets is_credentials_non_expired
     *
     * @return bool
     */
    public function getIsCredentialsNonExpired()
    {
        return $this->container['is_credentials_non_expired'];
    }

    /**
     * Sets is_credentials_non_expired
     *
     * @param bool $is_credentials_non_expired is_credentials_non_expired
     *
     * @return $this
     */
    public function setIsCredentialsNonExpired($is_credentials_non_expired)
    {
        $this->container['is_credentials_non_expired'] = $is_credentials_non_expired;

        return $this;
    }

    /**
     * Gets is_enabled
     *
     * @return bool
     */
    public function getIsEnabled()
    {
        return $this->container['is_enabled'];
    }

    /**
     * Sets is_enabled
     *
     * @param bool $is_enabled is_enabled
     *
     * @return $this
     */
    public function setIsEnabled($is_enabled)
    {
        $this->container['is_enabled'] = $is_enabled;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password password
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets tenant
     *
     * @return string
     */
    public function getTenant()
    {
        return $this->container['tenant'];
    }

    /**
     * Sets tenant
     *
     * @param string $tenant tenant
     *
     * @return $this
     */
    public function setTenant($tenant)
    {
        $this->container['tenant'] = $tenant;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return \DateTime
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param \DateTime $update_date update_date
     *
     * @return $this
     */
    public function setUpdateDate($update_date)
    {
        $this->container['update_date'] = $update_date;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


