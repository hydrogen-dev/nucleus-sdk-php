<?php
/**
 * Balances
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.3
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\nucleus\Model;

use \ArrayAccess;
use \com\hydrogen\nucleus\ObjectSerializer;

/**
 * Balances Class Doc Comment
 *
 * @category Class
 * @description Balances Object
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Balances implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Balances';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'currency_code' => 'string',
        'payable_outstanding' => 'double',
        'payable_overdue' => 'double',
        'receivable_outstanding' => 'double',
        'receivable_overdue' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'currency_code' => null,
        'payable_outstanding' => 'double',
        'payable_overdue' => 'double',
        'receivable_outstanding' => 'double',
        'receivable_overdue' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currency_code' => 'currency_code',
        'payable_outstanding' => 'payable_outstanding',
        'payable_overdue' => 'payable_overdue',
        'receivable_outstanding' => 'receivable_outstanding',
        'receivable_overdue' => 'receivable_overdue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currency_code' => 'setCurrencyCode',
        'payable_outstanding' => 'setPayableOutstanding',
        'payable_overdue' => 'setPayableOverdue',
        'receivable_outstanding' => 'setReceivableOutstanding',
        'receivable_overdue' => 'setReceivableOverdue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currency_code' => 'getCurrencyCode',
        'payable_outstanding' => 'getPayableOutstanding',
        'payable_overdue' => 'getPayableOverdue',
        'receivable_outstanding' => 'getReceivableOutstanding',
        'receivable_overdue' => 'getReceivableOverdue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['payable_outstanding'] = isset($data['payable_outstanding']) ? $data['payable_outstanding'] : null;
        $this->container['payable_overdue'] = isset($data['payable_overdue']) ? $data['payable_overdue'] : null;
        $this->container['receivable_outstanding'] = isset($data['receivable_outstanding']) ? $data['receivable_outstanding'] : null;
        $this->container['receivable_overdue'] = isset($data['receivable_overdue']) ? $data['receivable_overdue'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code currencyCode
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets payable_outstanding
     *
     * @return double
     */
    public function getPayableOutstanding()
    {
        return $this->container['payable_outstanding'];
    }

    /**
     * Sets payable_outstanding
     *
     * @param double $payable_outstanding payableOutstanding
     *
     * @return $this
     */
    public function setPayableOutstanding($payable_outstanding)
    {
        $this->container['payable_outstanding'] = $payable_outstanding;

        return $this;
    }

    /**
     * Gets payable_overdue
     *
     * @return double
     */
    public function getPayableOverdue()
    {
        return $this->container['payable_overdue'];
    }

    /**
     * Sets payable_overdue
     *
     * @param double $payable_overdue payableOverdue
     *
     * @return $this
     */
    public function setPayableOverdue($payable_overdue)
    {
        $this->container['payable_overdue'] = $payable_overdue;

        return $this;
    }

    /**
     * Gets receivable_outstanding
     *
     * @return double
     */
    public function getReceivableOutstanding()
    {
        return $this->container['receivable_outstanding'];
    }

    /**
     * Sets receivable_outstanding
     *
     * @param double $receivable_outstanding receivableOutstanding
     *
     * @return $this
     */
    public function setReceivableOutstanding($receivable_outstanding)
    {
        $this->container['receivable_outstanding'] = $receivable_outstanding;

        return $this;
    }

    /**
     * Gets receivable_overdue
     *
     * @return double
     */
    public function getReceivableOverdue()
    {
        return $this->container['receivable_overdue'];
    }

    /**
     * Sets receivable_overdue
     *
     * @param double $receivable_overdue receivableOverdue
     *
     * @return $this
     */
    public function setReceivableOverdue($receivable_overdue)
    {
        $this->container['receivable_overdue'] = $receivable_overdue;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


